@use "sass:map";
@import "../../theme";

$button-default-font-size: (
  "mq-large": 23,
  "mq-tablet-max": 20,
  "mq-mobile": 20,
);
$button-default-padding-horizontal: (
  "mq-large": 35,
  "mq-tablet-max": 45,
  "mq-mobile": 30,
);
$button-default-padding-vertical: (
  "mq-large": 12,
  "mq-tablet-max": 12,
  "mq-mobile": 11,
);

.button {
  align-items: center;
  background: none;
  border-style: solid;
  border-width: 1px;
  clear: both;
  display: inline-flex;
  flex-direction: row;
  font-family: $font-montserrat;
  font-weight: 400;
  justify-content: center;
  position: relative;
  text-decoration: none;
  transition: unset;
  z-index: 0;

  &::before,
  &::after {
    bottom: 0;
    content: "";
    display: block;
    left: 30%;
    opacity: 0;
    position: absolute;
    right: 30%;
    top: 0;
    transition: unset;
    z-index: -1;
  }

  &::after {
    display: block;
    left: 0;
    opacity: 0;
    right: 0;
    z-index: -2;
  }

  &:link,
  &:visited {
    background: none;
    border-style: solid;
    border-width: 1px;
    text-decoration: none;
  }

  &:hover,
  &:active,
  &:focus {
    background: none;
    border-style: solid;
    border-width: 1px;
    cursor: pointer;
    outline: none;
    text-decoration: none;
    transition: color 0.15s ease-in-out;

    &::before {
      left: 0;
      opacity: 1;
      right: 0;
      transition: all 0.15s ease-in-out;
    }
  }

  &:focus {
    outline: px-to-rem(2) dashed;
    outline-offset: px-to-rem(4);
  }

  &[disabled] {
    cursor: default;
    opacity: 0.75;

    &::before {
      left: 0;
      opacity: 1;
      right: 0;
    }
  }

  .icon {
    margin-left: px-to-rem(10);
  }

  &.large {
    font-size: px-to-rem-mobile(map.get($button-default-font-size, "mq-mobile") * 1.25);
    padding:
      px-to-rem-mobile(map.get($button-default-padding-vertical, "mq-mobile") * 1.25)
      px-to-rem-mobile(map.get($button-default-padding-horizontal, "mq-mobile") * 1.25);
  }

  &.medium {
    font-size: px-to-rem-mobile(map.get($button-default-font-size, "mq-mobile"));
    padding:
      px-to-rem-mobile(map.get($button-default-padding-vertical, "mq-mobile"))
      px-to-rem-mobile(map.get($button-default-padding-horizontal, "mq-mobile"));
  }

  &.small {
    font-size: px-to-rem-mobile(map.get($button-default-font-size, "mq-mobile") * 0.75);
    padding:
      px-to-rem-mobile(map.get($button-default-padding-vertical, "mq-mobile") * 0.75)
      px-to-rem-mobile(map.get($button-default-padding-horizontal, "mq-mobile") * 0.75);
  }

  &.ghost {
    padding: 0;
  }

  @media #{$mq-large} {
    &.large {
      font-size: px-to-rem-mobile(map.get($button-default-font-size, "mq-large") * 1.25);
      padding:
        px-to-rem-mobile(map.get($button-default-padding-vertical, "mq-large") * 1.25)
        px-to-rem-mobile(map.get($button-default-padding-horizontal, "mq-large") * 1.25);
    }

    &.medium {
      font-size: px-to-rem(map.get($button-default-font-size, "mq-large"));
      padding:
        px-to-rem(map.get($button-default-padding-vertical, "mq-large"))
        px-to-rem(map.get($button-default-padding-horizontal, "mq-large"));
    }

    &.small {
      font-size: px-to-rem-mobile(map.get($button-default-font-size, "mq-large") * 0.75);
      padding:
        px-to-rem-mobile(map.get($button-default-padding-vertical, "mq-large") * 0.75)
        px-to-rem-mobile(map.get($button-default-padding-horizontal, "mq-large") * 0.75);
    }

    &.ghost {
      padding: 0;
    }
  }

  @media #{$mq-tablet-max} {
    &.large {
      font-size: px-to-rem-mobile(map.get($button-default-font-size, "mq-tablet-max") * 1.25);
      padding:
        px-to-rem-mobile(map.get($button-default-padding-vertical, "mq-tablet-max") * 1.25)
        px-to-rem-mobile(map.get($button-default-padding-horizontal, "mq-tablet-max") * 1.25);
    }

    &.medium {
      font-size: px-to-rem(map.get($button-default-font-size, "mq-tablet-max"));
      padding:
        px-to-rem(map.get($button-default-padding-vertical, "mq-tablet-max"))
        px-to-rem(map.get($button-default-padding-horizontal, "mq-tablet-max"));
    }

    &.small {
      font-size: px-to-rem-mobile(map.get($button-default-font-size, "mq-tablet-max") * 0.75);
      padding:
        px-to-rem-mobile(map.get($button-default-padding-vertical, "mq-tablet-max") * 0.75)
        px-to-rem-mobile(map.get($button-default-padding-horizontal, "mq-tablet-max") * 0.75);
    }

    &.ghost {
      padding: 0;
    }
  }

  @media #{$mq-tablet-min} {
    clear: none;
  }
}

@mixin button-color($color, $color-accessible-foreground) {
  &:focus {
    outline-color: var(--color-primary-light);
  }

  &.hollow {
    border-color: var($color);
    color: var($color);

    &::before,
    &::after {
      background-color: var(--color-background);
    }

    &:link,
    &:visited {
      border-color: var($color);
      color: var($color);
    }

    &:hover,
    &:active,
    &:focus,
    &[disabled] {
      border-color: var($color);
      color: var($color-accessible-foreground);

      &::before {
        background-color: var($color);
      }
    }
  }

  &.ghost {
    border: none;
    color: var($color);

    &::before,
    &::after {
      display: none;
    }

    &:link,
    &:visited {
      border: none;
      color: var($color);
    }

    &:hover,
    &:active,
    &:focus,
    &[disabled] {
      border: none;
      color: var($color);
    }
  }

  &.solid {
    border-color: var($color);
    color: var($color-accessible-foreground);

    &::before,
    &::after {
      background-color: var($color);
    }

    &::after {
      opacity: 1;
    }

    &:link,
    &:visited {
      border-color: var($color);
      color: var($color-accessible-foreground);
    }

    &:hover,
    &:active,
    &:focus,
    &[disabled] {
      border-color: var($color);
      color: var(--color-foreground);

      &::before {
        background-color: var(--color-background);
      }
    }
  }
}

.blue-dark {
  @include button-color(--color-secondary-dark, --color-secondary-dark-accessible);
}

.white {
  @include button-color(--color-foreground, --color-background);
}

.yellow-light {
  @include button-color(--color-primary-light, --color-primary-light-accessible);
}
